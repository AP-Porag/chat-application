<div class="modal-wrapper" id="add-user-modal">
    <div class="modal">
        <a href="#" onclick="closeModal()" class="modal-close">+</a>
        <div class="modal-title">
            <h2>Create New User</h2>
        </div>
        <div class="modal-body">
            <form
                    method="post"
                    action="/users"
                    enctype="multipart/form-data"
                    id="add-user-form">
                <input type="text" placeholder="enter name" name="name"/>
                <p class="error name-error">This is error</p>

                <input type="text" placeholder="enter email" name="email"/>
                <p class="error email-error">This is error</p>

                <input type="text" placeholder="enter mobile" name="mobile"/>
                <p class="error mobile-error">This is error</p>

                <input
                        type="password"
                        placeholder="enter password"
                        name="password"
                />
                <p class="error password-error">This is error</p>

                <input type="file" name="avatar"/>
                <p class="error avatar-error">This is error</p>
                <p class="error common-error">This is error</p>

                <input type="submit" value="Submit"/>
            </form>
        </div>
    </div>
</div>
<script>
    const modal = document.querySelector("#add-user-modal");
    const form = document.querySelector('#add-user-form');
    const successToast = Toastify({
        text: 'user added successfully ! Reloading the user list',
        duration: 5000,
    });

    function closeModal() {
        modal.style.display = "none";
    }

    function openModal() {
        modal.style.display = "block";
    }

    //form on submit handler
    form.onsubmit = async function (event) {
        event.preventDefault();

        //clear previous error first
        const errorPlaceholder = document.querySelectorAll('p.error');

        for (let i = 0; i < errorPlaceholder.length; i++) {
            errorPlaceholder[i].style.display = 'none';
        }

        const inputErrors = document.querySelectorAll('input.error');

        for (let j = 0; j < inputErrors.length; j++) {
            inputErrors[j].classList.remove('error');
        }
        //prepare the form data
        const formData = new FormData(form);

        //send the request to the server
        let response = await fetch('/users', {
            method: 'POST',
            body: formData
        });

        //get response form the server
        let result = await response.json();

        //handle error and response
        if (result.errors) {
            //handle errors
            Object.keys(result.errors).forEach((fieldName) => {
                //make error visible to UI
                form[fieldName].classList.add('error');

                //set all error placeholder (p tag) text content
                const errorPlaceholder = document.querySelector(`.${fieldName}-error`);
                console.log(errorPlaceholder)

                errorPlaceholder.textContent = result.errors[fieldName].msg;

                //make all the placeholder visible
                errorPlaceholder.style.display = 'block';
            });
        } else {
            //handle success
            successToast.showToast();
            closeModal();
            document.querySelector('p.error').style.display = 'none';

            //reload the page after 1 second
            setTimeout(() => {
                location.reload();
            }, 1000);
        }
    }
</script>